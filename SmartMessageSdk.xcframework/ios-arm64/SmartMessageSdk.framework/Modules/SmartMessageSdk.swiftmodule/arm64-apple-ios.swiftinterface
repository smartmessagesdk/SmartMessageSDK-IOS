// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios12.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name SmartMessageSdk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import AVKit
import BackgroundTasks
import CommonCrypto
import CoreData
import CoreLocation
import DeveloperToolsSupport
import Foundation
import ImageIO
@_exported import SmartMessageSdk
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UserNotifications
import UserNotificationsUI
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class InteractiveAction {
  public var title: Swift.String!
  public var action: (() -> Swift.Void)!
  public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class SMPNotificationViewController : UIKit.UIViewController, UserNotificationsUI.UNNotificationContentExtension {
  @_Concurrency.MainActor @preconcurrency @objc open func didReceive(_ notification: UserNotifications.UNNotification)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias GifLevelOfIntegrity = Swift.Float
extension Swift.Float {
  public static let highestNoFrameSkipping: SmartMessageSdk.GifLevelOfIntegrity
  public static let `default`: SmartMessageSdk.GifLevelOfIntegrity
  public static let lowForManyGifs: SmartMessageSdk.GifLevelOfIntegrity
  public static let lowForTooManyGifs: SmartMessageSdk.GifLevelOfIntegrity
  public static let superLowForSlideShow: SmartMessageSdk.GifLevelOfIntegrity
}
extension UIKit.UIImage {
  convenience public init?(imageData: Foundation.Data, levelOfIntegrity: SmartMessageSdk.GifLevelOfIntegrity = .default) throws
  convenience public init?(imageName: Swift.String, levelOfIntegrity: SmartMessageSdk.GifLevelOfIntegrity = .default) throws
}
extension UIKit.UIImage {
  convenience public init(gifData: Foundation.Data, levelOfIntegrity: SmartMessageSdk.GifLevelOfIntegrity = .default) throws
  convenience public init(gifName: Swift.String, levelOfIntegrity: SmartMessageSdk.GifLevelOfIntegrity = .default) throws
  public func setGifFromData(_ data: Foundation.Data, levelOfIntegrity: SmartMessageSdk.GifLevelOfIntegrity) throws
  public func setGif(_ name: Swift.String) throws
  public func framesCount() -> Swift.Int
  public func setGif(_ name: Swift.String, levelOfIntegrity: SmartMessageSdk.GifLevelOfIntegrity) throws
  public func clear()
}
extension UIKit.UIImage {
  public var imageSource: ImageIO.CGImageSource? {
    get
    set
  }
  public var displayRefreshFactor: Swift.Int? {
    get
    set
  }
  public var imageSize: Swift.Int? {
    get
    set
  }
  public var imageCount: Swift.Int? {
    get
    set
  }
  public var displayOrder: [Swift.Int]? {
    get
    set
  }
  public var imageData: Foundation.Data? {
    get
    set
  }
}
@objc public class MessageEntityModel : ObjectiveC.NSObject, Foundation.NSSecureCoding, Swift.Codable {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required convenience public init?(coder: Foundation.NSCoder)
  public init(id: Swift.String!, messageText: Swift.String?, sentDate: Swift.String?, seen: Swift.Bool?, tags: Swift.String?, thumbnail: Swift.String?, title: Swift.String?, type: Swift.String?, contentUrl: Swift.String?, isDataDownloaded: Swift.Bool?, notificationJson: Swift.String?)
  public init(messageEntity: SmartMessageSdk.MessageEntity)
  public init?(notifInfo: [Swift.String : Any])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class EncryptionHelper : ObjectiveC.NSObject {
  public class func __decryptData(hexStr: Swift.String, hexKey: Swift.String, hexIV: Swift.String) throws -> Swift.String
  public class func decryptAESData(hexStr: Swift.String, hexKey: Swift.String, hexIV: Swift.String) throws -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
open class SwiftyGifManager {
  public static var defaultManager: SmartMessageSdk.SwiftyGifManager
  open var haveCache: Swift.Bool
  public init(memoryLimit: Swift.Int)
  @objc deinit
  public func startTimerIfNeeded()
  public func stopTimer()
  open func addImageView(_ imageView: UIKit.UIImageView) -> Swift.Bool
  open func deleteImageView(_ imageView: UIKit.UIImageView)
  open func updateCacheSize(for imageView: UIKit.UIImageView, add: Swift.Bool)
  open func clear()
  open func containsImageView(_ imageView: UIKit.UIImageView) -> Swift.Bool
  open func hasCache(_ imageView: UIKit.UIImageView) -> Swift.Bool
}
@_inheritsConvenienceInitializers public class PermissionRevokedResponse : SmartMessageSdk.BaseDecodableModel {
  override public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
@_inheritsConvenienceInitializers public class CarouselNotificationModel : SmartMessageSdk.SingleNotificationItemModel {
  open var slides: [SmartMessageSdk.CarouselItemModel]
  override public init()
  override public func toJsonDictionary() -> [Swift.String : Any]
  override public func toJsonString() -> Swift.String
  override public func fromJsonString(jsonStr: Swift.String)
  override public func fromDictionary(dic: [Swift.String : Any])
  @objc deinit
}
public enum Result<T> {
  case success(T)
  case failure(any Swift.Error)
  case empty
}
@_hasMissingDesignatedInitializers public class MessageListResponseModel : SmartMessageSdk.BaseDecodableModel {
  @objc deinit
}
public enum ActionTypeEnum : Swift.String {
  case delivered
  case view
  case open
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol SwiftyGifDelegate {
  @objc optional func gifDidStart(sender: UIKit.UIImageView)
  @objc optional func gifDidLoop(sender: UIKit.UIImageView)
  @objc optional func gifDidStop(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFinish(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFail(sender: UIKit.UIImageView, url: Foundation.URL, error: (any Swift.Error)?)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func setImage(_ image: UIKit.UIImage, manager: SmartMessageSdk.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency convenience public init(gifImage: UIKit.UIImage, manager: SmartMessageSdk.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
  @_Concurrency.MainActor @preconcurrency convenience public init(gifURL: Foundation.URL, manager: SmartMessageSdk.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
  @_Concurrency.MainActor @preconcurrency public func setGifImage(_ gifImage: UIKit.UIImage, manager: SmartMessageSdk.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
}
extension UIKit.UIImageView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func setGifFromURL(_ url: Foundation.URL, manager: SmartMessageSdk.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1, levelOfIntegrity: SmartMessageSdk.GifLevelOfIntegrity = .default, showLoader: Swift.Bool = true) -> Foundation.URLSessionDataTask
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func startAnimatingGif()
  @_Concurrency.MainActor @preconcurrency public func stopAnimatingGif()
  @_Concurrency.MainActor @preconcurrency public func isAnimatingGif() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func showFrameForIndexDelta(_ delta: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func showFrameAtIndex(_ index: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func updateCache()
  @_Concurrency.MainActor @preconcurrency public func updateCurrentImage()
  @_Concurrency.MainActor @preconcurrency public func currentFrameIndex() -> Swift.Int
  @_Concurrency.MainActor @preconcurrency public func frameAtIndex(index: Swift.Int) -> UIKit.UIImage
  @_Concurrency.MainActor @preconcurrency public func isDiscarded(_ imageView: UIKit.UIView?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func isDisplayedInScreen(_ imageView: UIKit.UIView?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func clear()
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public var gifImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var loopCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animationManager: SmartMessageSdk.SwiftyGifManager? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var delegate: (any SmartMessageSdk.SwiftyGifDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var displaying: Swift.Bool {
    get
    set
  }
}
public enum PermissionType : Swift.String, Swift.Codable {
  case NOTIFICATION
  case LOCATION
  case APPROXIMATE_LOCATION
  case PRECISE_LOCATION
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SmartMessageSdk.SmartMessage {
  public func configureNotificationService(request: UserNotifications.UNNotificationRequest, contentHandler: (UserNotifications.UNNotificationContent) -> Swift.Void, bestAttemptContent: UserNotifications.UNMutableNotificationContent?)
  public func handleApsCryption(aps: [Swift.String : Any], _ completion: @escaping (_ notificationInfo: [Swift.String : Any]?, _ error: SmartMessageSdk.NotificationDecryptionHelperError?) -> Swift.Void)
  public func saveInAppToPhysicalMemory(userInfo: [Swift.AnyHashable : Any]) throws
  public func showPendingInApp(viewController: UIKit.UIViewController!) throws
  public func isInApp(type: Swift.String) -> Swift.Bool
  public func handleNotification(baseExtensionController: UIKit.UIViewController, baseView: UIKit.UIView, aps: [Swift.AnyHashable : Any], isNotificationWillPresent: Swift.Bool)
}
public struct NotificationAlertModel {
}
public enum InteractiveOTPError : Swift.Error {
  case NullorEmptyUrlString
  case UrlStringIsNotHttp
  case NullorEmptySecretUrlKey
  case NullorEmptyButtonValue
  case MissingOTPComponent
  case NullOrEmptyOTPString
  public static func == (a: SmartMessageSdk.InteractiveOTPError, b: SmartMessageSdk.InteractiveOTPError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BaseEncodableModel : Swift.Encodable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol CoreDataDelegate : AnyObject {
  func saveMessageListToDB(messageEntityModelList: [SmartMessageSdk.MessageEntityModel])
  func saveMessageToDB(messageEntityModel: SmartMessageSdk.MessageEntityModel)
  func getMessage(notificationId: Swift.String) -> SmartMessageSdk.MessageEntityModel?
  func getMessageList() -> [SmartMessageSdk.MessageEntityModel]?
  func updateNotificationAsSeen(notificationId: Swift.String)
}
public protocol DeepLinkHandlerDelegate {
  func handleExternalDeepLink(link: Swift.String)
  func handleInternalDeepLink(link: Swift.String, isButtonClick: Swift.Bool)
}
extension SmartMessageSdk.SmartMessage {
  public func isDeepLinkValid(userInfo: [Swift.AnyHashable : Any], delegate: any SmartMessageSdk.DeepLinkHandlerDelegate) throws -> Swift.Bool
}
public protocol NotificationCallbacksProtocol {
  func didReceiveNotification(notification: [Swift.String : Any])
  func didClickNotification(notification: [Swift.String : Any])
  func didClickNotificationButton(notification: [Swift.String : Any], button: SmartMessageSdk.NotificationActionModel)
  func didDismissNotification(notification: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class MessageListRequestModel : SmartMessageSdk.BaseEncodableModel {
  public init(customerNo: Swift.String?, externalId: Swift.String?, status: [Swift.String]?, pushType: [Swift.String]?, expiredPush: Swift.Bool?, index: Swift.Int?, size: Swift.Int?, orderBy: Swift.String?, startDate: Swift.String?, endDate: Swift.String?)
  @objc deinit
}
public class StorageResponseModel : SmartMessageSdk.BaseDecodableModel {
  required public init(from decoder: any Swift.Decoder) throws
  public func convertToDictionary() -> [Swift.String : Any]?
  @objc deinit
}
public enum MessageListEnum : Swift.String, Swift.Codable {
  case MessagesEntity
  case messageList
  case id
  case messageText
  case sentDate
  case isSeen
  case tags
  case thumbnail
  case title
  case type
  case contentUrl
  case isDataDownloaded
  case notificationJson
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GeofenceEntityEnum : Swift.String, Swift.Codable {
  case geofenceEntity
  case id
  case expireDate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CampaignEntityEnum : Swift.String, Swift.Codable {
  case campaignEntity
  case campaignId
  case messageId
  case expireDate
  case frequency
  case triggerType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GeofenceCampaignEntityEnum : Swift.String, Swift.Codable {
  case geofenceCampaignEntity
  case campaignId
  case geofenceId
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NotificationDecryptionHelperError : Swift.Error {
  case notificationDecryptionFailed
  public static func == (a: SmartMessageSdk.NotificationDecryptionHelperError, b: SmartMessageSdk.NotificationDecryptionHelperError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class SMPNotificationService : UserNotifications.UNNotificationServiceExtension {
  @objc override dynamic open func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc override dynamic open func serviceExtensionTimeWillExpire()
  @objc override dynamic public init()
  @objc deinit
}
open class BaseDecodableModel : Swift.Decodable, Swift.Encodable {
  open var responseCode: Swift.Int?
  open var explanation: Swift.String?
  public init()
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case responseCode
    case explanation
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class AccessTokenResponseModel : Swift.Decodable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Aes256Decryptor : SmartMessageSdk.DecryptionInterface {
  public init?(key: Swift.String) throws
  public func encrypt(messageData: Foundation.Data?) -> Foundation.Data?
  public func decrypt(encryptedData: Foundation.Data?) -> Foundation.Data?
  public func decryptToDictionary(encryptedData: Foundation.Data?) -> Foundation.NSDictionary?
  public static func decryptData(hexStr: Swift.String, key: Swift.String, iv: Swift.String) throws -> Swift.String
  public static func decryptData(hexStr: Swift.String, hexKey: Swift.String, hexIV: Swift.String) throws -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SMMemberFieldItemModel : Swift.Codable {
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SmartMessage : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate, SmartMessageSdk.NotificationPermissionResponseDelegate, SmartMessageSdk.LocationPermissionResponseDelegate {
  public static let shared: SmartMessageSdk.SmartMessage
  public var delegate: (any SmartMessageSdk.CoreDataDelegate)?
  public func initializeSdk(tokenId: Swift.String)
  public func setDeeplinkHandlerDelegate(deepLinkDelegate: (any SmartMessageSdk.DeepLinkHandlerDelegate)!)
  public func getCenter() -> (any UserNotifications.UNUserNotificationCenterDelegate)?
  public func setUNUserNotificationCenterDelegate(delegate: any UserNotifications.UNUserNotificationCenterDelegate)
  public func getAppGroupName() -> Swift.String
  public func isNotificationPermissionGranted(isGranted: Swift.Bool)
  public func isLocationPermissionGranted(status: CoreLocation.CLAuthorizationStatus)
  public func registerNotificationCallbacks(_ callbacks: any SmartMessageSdk.NotificationCallbacksProtocol)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  public func startLocationServices()
  public func stopLocationServices()
  public func getMessageContent(contentUrl: Swift.String, responseDelegate: any SmartMessageSdk.StorageResponseDelegate)
  public func getMessageContent(contentUrl: Swift.String, completionHandler: @escaping (SmartMessageSdk.Result<SmartMessageSdk.StorageResponseModel>) -> Swift.Void)
  public func reportMessageDismissed(userInfo: [Swift.String : Any])
  public func requestPushPermission()
  public func requestPushPermission(delegate: any SmartMessageSdk.NotificationPermissionResponseDelegate)
  public func requestPushPermission(completionHandler: @escaping (_ isGranted: Swift.Bool?) -> Swift.Void)
  public func requestLocationPermission()
  public func requestLocationPermission(delegate: any SmartMessageSdk.LocationPermissionResponseDelegate)
  public func getApnsDeviceToken() -> Swift.String?
  public func matchContactDevice(matchContactDeviceRequest: SmartMessageSdk.MatchContactDeviceRequestModel)
  public func matchContactDevice(matchContactDeviceRequest: SmartMessageSdk.MatchContactDeviceRequestModel, completionHandler: @escaping (SmartMessageSdk.Result<SmartMessageSdk.BaseDecodableModel>) -> Swift.Void)
  public func reportHeartbeat()
  public func reportCustomEvent(eventIdentifier: Swift.String!, uniqueId: Swift.String!, parameters: [Swift.String : Swift.String]?)
  public func reportCustomEvent(eventIdentifier: Swift.String!, uniqueId: Swift.String!, parameters: [Swift.String : Swift.String]?, delegate: (any SmartMessageSdk.CustomEventResponseDelegate)!)
  public func reportCustomEvent(eventIdentifier: Swift.String!, uniqueId: Swift.String!, parameters: [Swift.String : Swift.String]?, completion: @escaping (SmartMessageSdk.Result<SmartMessageSdk.BaseDecodableModel>) -> Swift.Void)
  public func saveConfig() throws
  public func updatePermission(permissionType: SmartMessageSdk.PermissionType, isGranted: Swift.Bool)
  public func updatePermission(permissionType: SmartMessageSdk.PermissionType, isGranted: Swift.Bool, completionHandler: @escaping (SmartMessageSdk.Result<SmartMessageSdk.BaseDecodableModel>) -> Swift.Void)
  public func updatePermission(permissionType: SmartMessageSdk.PermissionType, isGranted: Swift.Bool, delegate: any SmartMessageSdk.PermissionUpdateResponseDelegate)
  public func getUserInfo(_ completionHandler: @escaping (SmartMessageSdk.Result<SmartMessageSdk.GetUserInfoResponse>) -> Swift.Void)
  public func getUserInfo(userInfoResponseDelegate: any SmartMessageSdk.GetUserInfoResponseDelegate)
  public func isLocationEnabled() -> Swift.Bool
  public func setUserInfo(userModel: SmartMessageSdk.UserInfoRequestModel)
  public func setUserInfo(userModel: SmartMessageSdk.UserInfoRequestModel, delegate: any SmartMessageSdk.SetUserInfoResponseDelegate)
  public func setUserInfo(userModel: SmartMessageSdk.UserInfoRequestModel, completion: @escaping (SmartMessageSdk.Result<SmartMessageSdk.BaseDecodableModel>) -> Swift.Void)
  public func setDeviceInfo()
  public func getDeviceInfo(_ completionHandler: @escaping (_ deviceInfo: Swift.Dictionary<Swift.String, Any>?) -> Swift.Void)
  public func getMessageList(request: SmartMessageSdk.MessageListRequestModel, delegate: any SmartMessageSdk.MessageListResponseDelegate)
  public func getMessageList(request: SmartMessageSdk.MessageListRequestModel, completion: @escaping (SmartMessageSdk.Result<SmartMessageSdk.MessageListResponseModel>) -> Swift.Void)
  public func reportLogin()
  public func reportLogin(delegate: (any SmartMessageSdk.LoginResponseDelegate)!)
  public func reportLogin(completion: @escaping (SmartMessageSdk.Result<SmartMessageSdk.BaseDecodableModel>) -> Swift.Void)
  public func reportLogout()
  public func reportLogout(delegate: any SmartMessageSdk.LogoutResponseDelegate)
  public func reportLogout(completion: @escaping (SmartMessageSdk.Result<SmartMessageSdk.BaseDecodableModel>) -> Swift.Void)
  public func getInboxViewController(title: Swift.String, imageName: Swift.String, selectedImageName: Swift.String) -> UIKit.UIViewController?
  public func getNotificationListFromDB() -> [SmartMessageSdk.MessageEntityModel]?
  public func saveNotificationToDB(notification: [Swift.String : Any])
  public func updateNotificationAsSeen(notificationId: Swift.String)
  public func updateNotificationContent(notificationId: Swift.String, notificationString: Swift.String)
  @objc deinit
}
public enum CloseType : Swift.String {
  case APP_KILL
  case BACKGROUND
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConfigError : Swift.Error {
  case decodeToModelError
  case configPlistNotFoundError
  public static func == (a: SmartMessageSdk.ConfigError, b: SmartMessageSdk.ConfigError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DecryptionInterface {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GetUserInfoResponse : Swift.Decodable {
  public var userInfo: SmartMessageSdk.UserInfoModel
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class PermissionGrantedResponse : SmartMessageSdk.BaseDecodableModel {
  override public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum GeofenceType : Swift.Int, Swift.Codable {
  case ENTER
  case ROAMING
  case EXIT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PermissionRequestModel : SmartMessageSdk.BaseEncodableModel {
  required public init(permissionType: SmartMessageSdk.PermissionType)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol BaseResponseDelegate {
  func didSuccess(response: SmartMessageSdk.BaseDecodableModel)
  func didFail(error: Swift.String)
}
public protocol StorageResponseDelegate {
  func didStorageServiceSuccess(response: SmartMessageSdk.StorageResponseModel)
  func didStorageServiceFail(error: Swift.String)
}
public protocol CloseResponseDelegate : SmartMessageSdk.BaseResponseDelegate {
}
public protocol OpenResponseDelegate : SmartMessageSdk.BaseResponseDelegate {
}
public protocol CustomEventResponseDelegate {
  func didCustomEventServiceSuccess(response: SmartMessageSdk.BaseDecodableModel)
  func didCustomEventServiceFail(error: Swift.String)
}
public protocol LocationUpdateResponseDelegate {
  func didLocationUpdateServiceSuccess(response: SmartMessageSdk.BaseDecodableModel)
  func didLocationUpdateServiceFail(error: Swift.String)
}
public protocol LocationPermissionResponseDelegate {
  func isLocationPermissionGranted(status: CoreLocation.CLAuthorizationStatus)
}
public protocol LoginResponseDelegate {
  func didLoginServiceSuccess(response: SmartMessageSdk.BaseDecodableModel)
  func didLoginServiceFail(error: Swift.String)
}
public protocol LogoutResponseDelegate {
  func didLogoutServiceSuccess(response: SmartMessageSdk.BaseDecodableModel)
  func didLogoutServiceFail(error: Swift.String)
}
public protocol MessageListResponseDelegate {
  func didMessageListServiceSuccess(response: SmartMessageSdk.BaseDecodableModel)
  func didMessageListServiceFail(error: Swift.String)
}
public protocol NotificationPermissionResponseDelegate {
  func isNotificationPermissionGranted(isGranted: Swift.Bool)
}
public protocol PermissionUpdateResponseDelegate {
  func didPermissionUpdateSuccess(response: SmartMessageSdk.BaseDecodableModel)
  func didPermissionUpdateFail(error: Swift.String)
}
public protocol SetUserInfoResponseDelegate {
  func didSetUserInfoServiceSuccess(response: SmartMessageSdk.BaseDecodableModel)
  func didSetUserInfoServiceFail(error: Swift.String)
}
public protocol GetUserInfoResponseDelegate {
  func didGetUserInfoServiceSuccess(response: SmartMessageSdk.UserInfoModel)
  func didGetUserInfoServiceFail(error: Swift.String)
}
public class NotificationActionModel {
  open var label: Swift.String?
  open var link: Swift.String?
  open var linkId: Swift.String?
  open var deeplinkType: Swift.Int?
  open var color: Swift.String?
  open var textColor: Swift.String?
  public init()
  @objc deinit
}
extension Swift.Encodable {
  public func encodeToJsonString() throws -> Swift.String?
}
open class CarouselItemModel {
  open var title: Swift.String?
  open var message: Swift.String?
  open var imageUrl: Swift.String?
  open var image: UIKit.UIImage?
  open var buttons: [SmartMessageSdk.NotificationActionModel]
  public init()
  public func toJsonDictionary() -> [Swift.String : Any]
  public func toJsonString() -> Swift.String
  public func fromJsonString(jsonStr: Swift.String)
  public func fromDictionary(dic: [Swift.String : Any])
  @objc deinit
}
public enum LinkType : Swift.Int, Swift.Codable {
  case NONE
  case WEB_LINK
  case APP_LINK
  case API_CALL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MatchContactDeviceRequestModel : SmartMessageSdk.BaseEncodableModel, Swift.Decodable {
  public init(externalId: Swift.String!, targetAddresses: [SmartMessageSdk.TargetAddress]!)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TargetAddress : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension SmartMessageSdk.SmartMessage {
  public func showSmallInAppPopUp(baseViewController: UIKit.UIViewController, notificationInfo: [Swift.String : Any])
  public func showMediumInAppPopUp(baseViewController: UIKit.UIViewController, notificationInfo: [Swift.String : Any])
  public func showFullScreenInAppPopUp(baseViewController: UIKit.UIViewController, notificationInfo: [Swift.String : Any])
  public func showInteractiveInAppPopUp(baseViewController: UIKit.UIViewController, notificationInfo: [Swift.String : Any])
  public func showHTMLPopUp(baseViewController: UIKit.UIViewController, notificationInfo: [Swift.String : Any])
}
@objc @_inheritsConvenienceInitializers @main @_Concurrency.MainActor @preconcurrency open class SMPAppDelegate : UIKit.UIResponder, UIKit.UIApplicationDelegate, SmartMessageSdk.DeepLinkHandlerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc open var window: UIKit.UIWindow?
  @_Concurrency.MainActor @preconcurrency @objc open func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc open func applicationDidBecomeActive(_ application: UIKit.UIApplication)
  @_Concurrency.MainActor @preconcurrency @objc open func applicationDidEnterBackground(_ application: UIKit.UIApplication)
  @_Concurrency.MainActor @preconcurrency open func handleExternalDeepLink(link: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func handleInternalDeepLink(link: Swift.String, isButtonClick: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc open func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc open func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
extension SmartMessageSdk.SMPAppDelegate : UserNotifications.UNUserNotificationCenterDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class UserInfoModel : Swift.Codable {
  public var pushToken: Swift.String?
  public var name: Swift.String?
  public var surname: Swift.String?
  public var email: Swift.String
  public var mobile: Swift.String?
  public var lang: Swift.String?
  public var tags: Swift.String?
  public var rcvNot: Swift.Bool?
  public var birthdate: Swift.String?
  public var username: Swift.String?
  public var gender: Swift.Int?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ApplinkClickRequestModel : SmartMessageSdk.BaseEncodableModel {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UserInfoRequestModel : SmartMessageSdk.BaseEncodableModel {
  public init(name: Swift.String?, surname: Swift.String?, email: Swift.String?, mobile: Swift.String?, id: Swift.String?, birthdate: Swift.String?, gender: Swift.String?, username: Swift.String?, rcvNot: Swift.Bool?, tags: Swift.String?, lang: Swift.String?, memberFields: [SmartMessageSdk.SMMemberFieldItemModel]?)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class SingleNotificationItemModel {
  open var type: Swift.String?
  open var nid: Swift.String?
  open var tags: Swift.String?
  open var title: Swift.String?
  open var subTitle: Swift.String?
  open var message: Swift.String?
  open var sound: UserNotifications.UNNotificationSound?
  open var mediaUrl: Swift.String?
  open var imageUrl: Swift.String?
  open var coverUrl: Swift.String?
  open var videoAutoPlay: Swift.Bool?
  open var buttons: [SmartMessageSdk.NotificationActionModel]
  public init()
  public func toJsonDictionary() -> [Swift.String : Any]
  public func toJsonString() -> Swift.String
  public func fromJsonString(jsonStr: Swift.String)
  public func fromDictionary(dic: [Swift.String : Any])
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CampaignEntity) public class CampaignEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SmartMessageSdk.CampaignEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SmartMessageSdk.CampaignEntity>
  @objc @NSManaged dynamic public var campaignId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expireDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var frequency: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var messageId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var triggerType: Swift.Int16 {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(GeofenceCampaignEntity) public class GeofenceCampaignEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SmartMessageSdk.GeofenceCampaignEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SmartMessageSdk.GeofenceCampaignEntity>
  @objc @NSManaged dynamic public var campaignId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var geofenceId: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(GeofenceEntity) public class GeofenceEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SmartMessageSdk.GeofenceEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SmartMessageSdk.GeofenceEntity>
  @objc @NSManaged dynamic public var enter: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var exit: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expireDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(MessageEntity) public class MessageEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SmartMessageSdk.MessageEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SmartMessageSdk.MessageEntity>
  @objc @NSManaged dynamic public var contentUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isDataDownloaded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var messageText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationJson: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var seen: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sentDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tags: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var thumbnail: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
}
extension SmartMessageSdk.ActionTypeEnum : Swift.Equatable {}
extension SmartMessageSdk.ActionTypeEnum : Swift.Hashable {}
extension SmartMessageSdk.ActionTypeEnum : Swift.RawRepresentable {}
extension SmartMessageSdk.PermissionType : Swift.Equatable {}
extension SmartMessageSdk.PermissionType : Swift.Hashable {}
extension SmartMessageSdk.PermissionType : Swift.RawRepresentable {}
extension SmartMessageSdk.InteractiveOTPError : Swift.Equatable {}
extension SmartMessageSdk.InteractiveOTPError : Swift.Hashable {}
extension SmartMessageSdk.MessageListEnum : Swift.Equatable {}
extension SmartMessageSdk.MessageListEnum : Swift.Hashable {}
extension SmartMessageSdk.MessageListEnum : Swift.RawRepresentable {}
extension SmartMessageSdk.GeofenceEntityEnum : Swift.Equatable {}
extension SmartMessageSdk.GeofenceEntityEnum : Swift.Hashable {}
extension SmartMessageSdk.GeofenceEntityEnum : Swift.RawRepresentable {}
extension SmartMessageSdk.CampaignEntityEnum : Swift.Equatable {}
extension SmartMessageSdk.CampaignEntityEnum : Swift.Hashable {}
extension SmartMessageSdk.CampaignEntityEnum : Swift.RawRepresentable {}
extension SmartMessageSdk.GeofenceCampaignEntityEnum : Swift.Equatable {}
extension SmartMessageSdk.GeofenceCampaignEntityEnum : Swift.Hashable {}
extension SmartMessageSdk.GeofenceCampaignEntityEnum : Swift.RawRepresentable {}
extension SmartMessageSdk.NotificationDecryptionHelperError : Swift.Equatable {}
extension SmartMessageSdk.NotificationDecryptionHelperError : Swift.Hashable {}
extension SmartMessageSdk.BaseDecodableModel.CodingKeys : Swift.Equatable {}
extension SmartMessageSdk.BaseDecodableModel.CodingKeys : Swift.Hashable {}
extension SmartMessageSdk.BaseDecodableModel.CodingKeys : Swift.RawRepresentable {}
extension SmartMessageSdk.CloseType : Swift.Equatable {}
extension SmartMessageSdk.CloseType : Swift.Hashable {}
extension SmartMessageSdk.CloseType : Swift.RawRepresentable {}
extension SmartMessageSdk.ConfigError : Swift.Equatable {}
extension SmartMessageSdk.ConfigError : Swift.Hashable {}
extension SmartMessageSdk.GeofenceType : Swift.Equatable {}
extension SmartMessageSdk.GeofenceType : Swift.Hashable {}
extension SmartMessageSdk.GeofenceType : Swift.RawRepresentable {}
extension SmartMessageSdk.LinkType : Swift.Equatable {}
extension SmartMessageSdk.LinkType : Swift.Hashable {}
extension SmartMessageSdk.LinkType : Swift.RawRepresentable {}
